/**
 * JHipster Generation Note on Auditing:
 * The 'enableAuditing' keyword is not supported in older JHipster versions.
 * To enable full change history for your entities, you have two options:
 *
 * 1. (Recommended) Update your generator:
 * Run 'npm update -g generator-jhipster' in your terminal.
 * Then, you can add the line 'enableAuditing for all' to the options
 * at the bottom of this file and re-import it.
 *
 * 2. (Manual) Manually enable auditing after generation:
 * For each entity you want to audit (e.g., Merchant, Client, etc.),
 * open the corresponding Java file (e.g., 'src/.../domain/Merchant.java')
 * and change the class definition to extend 'AbstractAuditingEntity<UUID>'.
 *
 * For example, change:
 * 'public class Merchant implements Serializable {'
 * to:
 * 'public class Merchant extends AbstractAuditingEntity<UUID> implements Serializable {'
 *
 * Your IDE will help you add the required import statement.
 * Repeat this for Client.java, PaymentTransaction.java, ClientCard.java, and AuditLog.java.
 */

/**
 * JHipster Generation Note on UUIDs:
 * This JDL file will generate entities with Long IDs by default.
 * To use UUIDs as primary keys, you must configure it in your
 * .yo-rc.json file before running the generator. Add the following
 * property to the "generator-jhipster" section:
 *
 * "pkType": "UUID"
 */

/**
 * Enum for Merchant operating mode.
 * Determines which set of credentials to use.
 */
enum MerchantMode {
    TEST, LIVE
}

/**
 * Enum for Merchant status.
 */
enum MerchantStatus {
    ACTIVE, INACTIVE
}

/**
 * Enum for the payment brand being used.
 * Based on the 'cardType' in the documentation.
 */
enum PaymentBrand {
    UNIONPAY, ALIPAY, WECHAT_PAY
}

/**
 * Enum for supported transaction currencies.
 * Based on the list in the demo files.
 */
enum Currency {
    AUD, USD, HKD, CAD, CHF, CNY, EUR, GBP, JPY, KRW, MOP, RUB, SGD, TWD
}

/**
 * Enum for the status of a payment transaction lifecycle.
 * This helps in tracking the state of each payment.
 */
enum TransactionStatus {
    RECEIVED,           // Initial request received from the merchant
    SENT_TO_GATEWAY,    // Request forwarded to the remote gateway
    AWAITING_CALLBACK,  // Waiting for the asynchronous notification from the gateway
    SUCCESS,            // Payment completed successfully
    FAILED,             // Payment failed
    CANCELLED,          // Payment was cancelled/voided
    REFUNDED,           // Payment was refunded
    QUERY_SUCCESS       // Status confirmed via a direct query
}

/**
 * Represents a merchant using the CUPA system.
 * It stores all the necessary configuration and credentials
 * for both our system (CUPA) and the upstream remote gateway.
 */
entity Merchant {
    name String required,
    mode MerchantMode required,
    status MerchantStatus required,
    balance BigDecimal, // Last known merchant total balance from a query

    // --- Credentials for Merchant -> CUPA access ---
    cupaTestApiKey String,
    cupaProdApiKey String,

    // --- Remote Gateway TEST Credentials ---
    remoteTestUrl String,
    remoteTestMerchantId String,
    remoteTestMerchantKey String, // The hash key for signature generation
    remoteTestApiKey String,      // The 'x-api-key' for header authentication

    // --- Remote Gateway LIVE (PROD) Credentials ---
    remoteProdUrl String,
    remoteProdMerchantId String,
    remoteProdMerchantKey String, // The hash key for signature generation
    remoteProdApiKey String       // The 'x-api-key' for header authentication
}

/**
 * Represents the end-user (customer) of a merchant.
 * This entity is based on the Client object described in the
 * "My Gateway Product Services Guide".
 */
entity Client {
    merchantClientId String required,
    name String,
    emailAddress String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    mobileNumber String,
    clientPhone String, // Alternative phone number
    valid Boolean,

    // --- Billing Address fields from the documentation ---
    streetNumber String,
    streetName String,
    streetSuffix String,
    city String,
    state String,
    postCode String,
    country String,

    // --- System-managed flags from the gateway ---
    isBlacklisted Boolean,
    isCorrelatedBlacklisted Boolean
}

/**
 * Represents a client's stored payment card.
 * Based on the 'cards' object in the documentation.
 * PAN is stored masked for security.
 */
entity ClientCard {
    maskedPan String required, // e.g., "************0064"
    expiryDate String, // e.g., "MM/YY"
    cardholderName String,
    isDefault Boolean,
    isValid Boolean
}

/**
 * Represents a single payment transaction from start to finish.
 * This entity acts as a comprehensive audit log, storing the request,
 * response, and status at each step of the process.
 */
entity PaymentTransaction {
    orderId String required,
    cupaTransactionId UUID required, // Internal transaction ID
    gatewayTransactionId String,
    status TransactionStatus required,
    statusDescription String,
    paymentBrand PaymentBrand required,
    amount BigDecimal required,
    balance BigDecimal, // Transaction-specific balance from a query
    currency Currency required,
    replyUrl String,
    backofficeUrl String,
    echo String,
    sendEmail Boolean,
    signature String,
    signatureVersion String,
    requestTimestamp Instant required,
    requestData TextBlob,
    initialResponseData TextBlob,
    callbackTimestamp Instant,
    callbackData TextBlob,
    lastQueryData TextBlob
}

/**
 * A generic entity to log every API request for audit and reporting.
 */
entity AuditLog {
    requestTimestamp Instant required,
    apiEndpoint String required, // e.g., "/api/merchants/{id}/transactions"
    httpMethod String required, // e.g., "POST"
    httpStatusCode Integer, // e.g., 200, 404
    orderId String,
    responseDescription String,
    cupaApiKey String,
    environment String, // TEST or PROD
    requestData TextBlob,
    responseData TextBlob,
    requesterIpAddress String
}

// --- Entity Relationships ---
relationship OneToMany {
    Merchant{client} to Client{merchant(name) required},
    Merchant{transaction} to PaymentTransaction{merchant(name) required},
    Merchant{auditLog} to AuditLog{merchant(name)},
    Client{card} to ClientCard{client(merchantClientId) required}
}

relationship ManyToOne {
    PaymentTransaction{client(merchantClientId)} to Client
}

// --- JHipster Options ---

// Apply pagination
paginate all with pagination

// Use MapStruct for DTOs for all entities.
dto all with mapstruct

// Generate service classes for all entities.
service all with serviceClass
