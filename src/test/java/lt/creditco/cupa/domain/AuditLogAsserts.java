package lt.creditco.cupa.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AuditLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogAllPropertiesEquals(AuditLog expected, AuditLog actual) {
        assertAuditLogAutoGeneratedPropertiesEquals(expected, actual);
        assertAuditLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogAllUpdatablePropertiesEquals(AuditLog expected, AuditLog actual) {
        assertAuditLogUpdatableFieldsEquals(expected, actual);
        assertAuditLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogAutoGeneratedPropertiesEquals(AuditLog expected, AuditLog actual) {
        assertThat(actual)
            .as("Verify AuditLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogUpdatableFieldsEquals(AuditLog expected, AuditLog actual) {
        assertThat(actual)
            .as("Verify AuditLog relevant properties")
            .satisfies(a -> assertThat(a.getRequestTimestamp()).as("check requestTimestamp").isEqualTo(expected.getRequestTimestamp()))
            .satisfies(a -> assertThat(a.getApiEndpoint()).as("check apiEndpoint").isEqualTo(expected.getApiEndpoint()))
            .satisfies(a -> assertThat(a.getHttpMethod()).as("check httpMethod").isEqualTo(expected.getHttpMethod()))
            .satisfies(a -> assertThat(a.getHttpStatusCode()).as("check httpStatusCode").isEqualTo(expected.getHttpStatusCode()))
            .satisfies(a -> assertThat(a.getOrderId()).as("check orderId").isEqualTo(expected.getOrderId()))
            .satisfies(a ->
                assertThat(a.getResponseDescription()).as("check responseDescription").isEqualTo(expected.getResponseDescription())
            )
            .satisfies(a -> assertThat(a.getCupaApiKey()).as("check cupaApiKey").isEqualTo(expected.getCupaApiKey()))
            .satisfies(a -> assertThat(a.getEnvironment()).as("check environment").isEqualTo(expected.getEnvironment()))
            .satisfies(a -> assertThat(a.getRequestData()).as("check requestData").isEqualTo(expected.getRequestData()))
            .satisfies(a -> assertThat(a.getResponseData()).as("check responseData").isEqualTo(expected.getResponseData()))
            .satisfies(a -> assertThat(a.getRequesterIpAddress()).as("check requesterIpAddress").isEqualTo(expected.getRequesterIpAddress())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogUpdatableRelationshipsEquals(AuditLog expected, AuditLog actual) {
        assertThat(actual)
            .as("Verify AuditLog relationships")
            .satisfies(a -> assertThat(a.getMerchant()).as("check merchant").isEqualTo(expected.getMerchant()));
    }
}
