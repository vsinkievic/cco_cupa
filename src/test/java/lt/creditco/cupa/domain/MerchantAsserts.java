package lt.creditco.cupa.domain;

import static lt.creditco.cupa.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MerchantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAllPropertiesEquals(Merchant expected, Merchant actual) {
        assertMerchantAutoGeneratedPropertiesEquals(expected, actual);
        assertMerchantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAllUpdatablePropertiesEquals(Merchant expected, Merchant actual) {
        assertMerchantUpdatableFieldsEquals(expected, actual);
        assertMerchantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAutoGeneratedPropertiesEquals(Merchant expected, Merchant actual) {
        assertThat(actual)
            .as("Verify Merchant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantUpdatableFieldsEquals(Merchant expected, Merchant actual) {
        assertThat(actual)
            .as("Verify Merchant relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getMode()).as("check mode").isEqualTo(expected.getMode()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getBalance()).as("check balance").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBalance())
            )
            .satisfies(a -> assertThat(a.getCupaTestApiKey()).as("check cupaTestApiKey").isEqualTo(expected.getCupaTestApiKey()))
            .satisfies(a -> assertThat(a.getCupaProdApiKey()).as("check cupaProdApiKey").isEqualTo(expected.getCupaProdApiKey()))
            .satisfies(a -> assertThat(a.getRemoteTestUrl()).as("check remoteTestUrl").isEqualTo(expected.getRemoteTestUrl()))
            .satisfies(a ->
                assertThat(a.getRemoteTestMerchantId()).as("check remoteTestMerchantId").isEqualTo(expected.getRemoteTestMerchantId())
            )
            .satisfies(a ->
                assertThat(a.getRemoteTestMerchantKey()).as("check remoteTestMerchantKey").isEqualTo(expected.getRemoteTestMerchantKey())
            )
            .satisfies(a -> assertThat(a.getRemoteTestApiKey()).as("check remoteTestApiKey").isEqualTo(expected.getRemoteTestApiKey()))
            .satisfies(a -> assertThat(a.getRemoteProdUrl()).as("check remoteProdUrl").isEqualTo(expected.getRemoteProdUrl()))
            .satisfies(a ->
                assertThat(a.getRemoteProdMerchantId()).as("check remoteProdMerchantId").isEqualTo(expected.getRemoteProdMerchantId())
            )
            .satisfies(a ->
                assertThat(a.getRemoteProdMerchantKey()).as("check remoteProdMerchantKey").isEqualTo(expected.getRemoteProdMerchantKey())
            )
            .satisfies(a -> assertThat(a.getRemoteProdApiKey()).as("check remoteProdApiKey").isEqualTo(expected.getRemoteProdApiKey()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantUpdatableRelationshipsEquals(Merchant expected, Merchant actual) {
        // empty method
    }
}
