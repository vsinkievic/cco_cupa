package lt.creditco.cupa.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllPropertiesEquals(Client expected, Client actual) {
        assertClientAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllUpdatablePropertiesEquals(Client expected, Client actual) {
        assertClientUpdatableFieldsEquals(expected, actual);
        assertClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAutoGeneratedPropertiesEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableFieldsEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getEmailAddress()).as("check emailAddress").isEqualTo(expected.getEmailAddress()))
            .satisfies(a -> assertThat(a.getMobileNumber()).as("check mobileNumber").isEqualTo(expected.getMobileNumber()))
            .satisfies(a -> assertThat(a.getClientPhone()).as("check clientPhone").isEqualTo(expected.getClientPhone()))
            .satisfies(a -> assertThat(a.getValid()).as("check valid").isEqualTo(expected.getValid()))
            .satisfies(a -> assertThat(a.getStreetNumber()).as("check streetNumber").isEqualTo(expected.getStreetNumber()))
            .satisfies(a -> assertThat(a.getStreetName()).as("check streetName").isEqualTo(expected.getStreetName()))
            .satisfies(a -> assertThat(a.getStreetSuffix()).as("check streetSuffix").isEqualTo(expected.getStreetSuffix()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getState()).as("check state").isEqualTo(expected.getState()))
            .satisfies(a -> assertThat(a.getPostCode()).as("check postCode").isEqualTo(expected.getPostCode()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getIsBlacklisted()).as("check isBlacklisted").isEqualTo(expected.getIsBlacklisted()))
            .satisfies(a ->
                assertThat(a.getIsCorrelatedBlacklisted())
                    .as("check isCorrelatedBlacklisted")
                    .isEqualTo(expected.getIsCorrelatedBlacklisted())
            )
            .satisfies(a -> assertThat(a.getMerchantId()).as("check merchantId").isEqualTo(expected.getMerchantId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableRelationshipsEquals(Client expected, Client actual) {
        // No relationships to check since the entity now uses ID fields instead of relationships
        // The merchantId field is checked in the updatable fields method above
    }
}
