package lt.creditco.cupa.domain;

import static lt.creditco.cupa.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAllPropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertPaymentTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAllUpdatablePropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertPaymentTransactionUpdatableFieldsEquals(expected, actual);
        assertPaymentTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAutoGeneratedPropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertThat(actual)
            .as("Verify PaymentTransaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionUpdatableFieldsEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertThat(actual)
            .as("Verify PaymentTransaction relevant properties")
            .satisfies(a -> assertThat(a.getOrderId()).as("check orderId").isEqualTo(expected.getOrderId()))
            .satisfies(a -> assertThat(a.getCupaTransactionId()).as("check cupaTransactionId").isEqualTo(expected.getCupaTransactionId()))
            .satisfies(a ->
                assertThat(a.getGatewayTransactionId()).as("check gatewayTransactionId").isEqualTo(expected.getGatewayTransactionId())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getStatusDescription()).as("check statusDescription").isEqualTo(expected.getStatusDescription()))
            .satisfies(a -> assertThat(a.getPaymentBrand()).as("check paymentBrand").isEqualTo(expected.getPaymentBrand()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a ->
                assertThat(a.getBalance()).as("check balance").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBalance())
            )
            .satisfies(a -> assertThat(a.getCurrency()).as("check currency").isEqualTo(expected.getCurrency()))
            .satisfies(a -> assertThat(a.getReplyUrl()).as("check replyUrl").isEqualTo(expected.getReplyUrl()))
            .satisfies(a -> assertThat(a.getBackofficeUrl()).as("check backofficeUrl").isEqualTo(expected.getBackofficeUrl()))
            .satisfies(a -> assertThat(a.getEcho()).as("check echo").isEqualTo(expected.getEcho()))
            .satisfies(a -> assertThat(a.getSendEmail()).as("check sendEmail").isEqualTo(expected.getSendEmail()))
            .satisfies(a -> assertThat(a.getSignature()).as("check signature").isEqualTo(expected.getSignature()))
            .satisfies(a -> assertThat(a.getSignatureVersion()).as("check signatureVersion").isEqualTo(expected.getSignatureVersion()))
            .satisfies(a -> assertThat(a.getRequestTimestamp()).as("check requestTimestamp").isEqualTo(expected.getRequestTimestamp()))
            .satisfies(a -> assertThat(a.getRequestData()).as("check requestData").isEqualTo(expected.getRequestData()))
            .satisfies(a ->
                assertThat(a.getInitialResponseData()).as("check initialResponseData").isEqualTo(expected.getInitialResponseData())
            )
            .satisfies(a -> assertThat(a.getCallbackTimestamp()).as("check callbackTimestamp").isEqualTo(expected.getCallbackTimestamp()))
            .satisfies(a -> assertThat(a.getCallbackData()).as("check callbackData").isEqualTo(expected.getCallbackData()))
            .satisfies(a -> assertThat(a.getLastQueryData()).as("check lastQueryData").isEqualTo(expected.getLastQueryData()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionUpdatableRelationshipsEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertThat(actual)
            .as("Verify PaymentTransaction relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getMerchant()).as("check merchant").isEqualTo(expected.getMerchant()));
    }
}
